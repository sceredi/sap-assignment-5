openapi: 3.0.3
info:
  title: EScootersManagementSystem microservices
  description: The api of the EScootersManagementSystem
  version: 0.1.0
tags:
  - name: APIGateway
    description: Operations about the API Gateway
  - name: Users
    description: Operations about the Users microservice
  - name: EScooters
    description: Operations about the EScooters microservice
  - name: Rides
    description: Operations about the Rides microservice
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: ''
      operationId: registerNewUser
      parameters:
        - name: userId
          in: query
          required: true
          description: id of the user
          schema:
            type: string
        - name: userName
          in: query
          required: true
          description: name of the user
          schema:
            type: string
        - name: userSurname
          in: query
          required: true
          description: surname of the user
          schema:
            type: string
      responses:
        default:
          description: successfull operation
          content:
            application/json:
              schema:
                type: object
                required:
                - result
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - error-saving-user
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Gets a user
      description: ''
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          description: the id of the user
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - user
                    properties:
                      result:
                        type: string
                        example: ok
                      user:
                        type: object
                        required:
                          - id
                          - name
                          - surname
                        properties:
                          id:
                            type: string
                            example: sceredi
                          name:
                            type: string
                            example: Simone
                          surname:
                            type: string
                            example: Ceredi
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: user-not-found
  /escooters:
    post:
      tags:
        - EScooters
      summary: Create a new EScooter
      description: ''
      operationId: registerNewEScooter
      parameters:
        - name: escooterId
          in: query
          required: true
          description: id of the escooter
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                  - escooter
                properties:
                  result:
                    type: string
                    example: ok
                  escooter:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        example: 123
        '412':
          description: precondition failed
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: EScooter with id 1 already exists
  /escooters/{escooterId}:
    get:
      tags:
        - EScooters
      summary: Gets an EScooter
      description: ''
      operationId: getEscooter
      parameters:
        - name: escooterId
          in: path
          required: true
          description: the id of the escooter
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                  - escooter
                properties:
                  result:
                    type: string
                    example: ok
                  escooter:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        example: 1
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: EScooter with id 1 not found
  /rides:
    post:
      tags:
        - Rides
      summary: Create a new ride
      description: ''
      operationId: startNewRide
      parameters:
        - name: userId
          in: query
          required: true
          description: id of the user
          schema:
            type: string
        - name: escooterId
          in: query
          required: true
          description: id of the escooter
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - rideId
                    properties:
                      result:
                        type: string
                        example: ok
                      rideId:
                        type: string
                        example: ride-13
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: error-saving-ride
  /rides/{rideId}:
    get:
      tags:
        - Rides
      summary: Gets a ride
      description: ''
      operationId: getRide
      parameters:
        - name: rideId
          in: path
          required: true
          description: the id of the ride
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - ride
                    properties:
                      result:
                        type: string
                        example: ok
                      ride:
                        type: object
                        required:
                          - id
                          - userId
                          - escooterId
                          - startDate
                          - endDate
                          - location
                        properties:
                          id:
                            type: string
                            example: ride-1
                          userId:
                            type: string
                            example: sceredi
                          escooterId:
                            type: string
                            example: escooter-01
                          startDate:
                            type: string
                            format: date-time
                            example: 2024-05-16T08:57:55.343
                          endDate:
                            type: string
                            format: date-time
                            example: 2024-05-16T08:57:55.343
                          location:
                            type: string
                            nullable: true
                            example: null
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ride-not-found
  /rides/{rideId}/end:
    post:
      tags:
        - Rides
      summary: End a ride
      description: ''
      operationId: endRide
      parameters:
        - name: rideId
          in: path
          required: true
          description: the id of the ride
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ok
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ride-not-found
  /api/users:
    post:
      tags:
        - APIGateway
      summary: Create a new user
      description: ''
      operationId: apiRegisterNewUser
      parameters:
        - name: userId
          in: query
          required: true
          description: id of the user
          schema:
            type: string
        - name: userName
          in: query
          required: true
          description: name of the user
          schema:
            type: string
        - name: userSurname
          in: query
          required: true
          description: surname of the user
          schema:
            type: string
      responses:
        default:
          description: successfull operation
          content:
            application/json:
              schema:
                type: object
                required:
                - result
                properties:
                  result:
                    type: string
                    enum:
                      - ok
                      - error-saving-user
  /api/users/{userId}:
    get:
      tags:
        - APIGateway
      summary: Gets a user
      description: ''
      operationId: apiGetUser
      parameters:
        - name: userId
          in: path
          required: true
          description: the id of the user
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - user
                    properties:
                      result:
                        type: string
                        example: ok
                      user:
                        type: object
                        required:
                          - id
                          - name
                          - surname
                        properties:
                          id:
                            type: string
                            example: sceredi
                          name:
                            type: string
                            example: Simone
                          surname:
                            type: string
                            example: Ceredi
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: user-not-found
  /api/escooters:
    post:
      tags:
        - APIGateway
      summary: Create a new EScooter
      description: ''
      operationId: apiRegisterNewEScooter
      parameters:
        - name: escooterId
          in: query
          required: true
          description: id of the escooter
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                  - escooter
                properties:
                  result:
                    type: string
                    example: ok
                  escooter:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        example: 123
        '412':
          description: precondition failed
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: EScooter with id 1 already exists
  /api/escooters/{escooterId}:
    get:
      tags:
        - APIGateway
      summary: Gets an EScooter
      description: ''
      operationId: apiGetEscooter
      parameters:
        - name: escooterId
          in: path
          required: true
          description: the id of the escooter
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                  - escooter
                properties:
                  result:
                    type: string
                    example: ok
                  escooter:
                    type: object
                    required:
                      - id
                    properties:
                      id:
                        type: string
                        example: 1
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - error
                properties:
                  error:
                    type: string
                    example: EScooter with id 1 not found
  /api/rides:
    post:
      tags:
        - APIGateway
      summary: Create a new ride
      description: ''
      operationId: apiStartNewRide
      parameters:
        - name: userId
          in: query
          required: true
          description: id of the user
          schema:
            type: string
        - name: escooterId
          in: query
          required: true
          description: id of the escooter
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - rideId
                    properties:
                      result:
                        type: string
                        example: ok
                      rideId:
                        type: string
                        example: ride-13
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: error-saving-ride
  /api/rides/{rideId}:
    get:
      tags:
        - APIGateway
      summary: Gets a ride
      description: ''
      operationId: apiGetRide
      parameters:
        - name: rideId
          in: path
          required: true
          description: the id of the ride
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                      - ride
                    properties:
                      result:
                        type: string
                        example: ok
                      ride:
                        type: object
                        required:
                          - id
                          - userId
                          - escooterId
                          - startDate
                          - endDate
                          - location
                        properties:
                          id:
                            type: string
                            example: ride-1
                          userId:
                            type: string
                            example: sceredi
                          escooterId:
                            type: string
                            example: escooter-01
                          startDate:
                            type: string
                            format: date-time
                            example: 2024-05-16T08:57:55.343
                          endDate:
                            type: string
                            format: date-time
                            example: 2024-05-16T08:57:55.343
                          location:
                            type: string
                            nullable: true
                            example: null
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ride-not-found
  /api/rides/{rideId}/end:
    post:
      tags:
        - APIGateway
      summary: End a ride
      description: ''
      operationId: apiEndRide
      parameters:
        - name: rideId
          in: path
          required: true
          description: the id of the ride
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ok
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        type: string
                        example: ride-not-found
